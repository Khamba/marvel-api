Hi!

This gem is made with the following thoughts in mind:

1) Easy to extend - Currently there is support for only /characters and /character/:id apis. But adding support for others is easy.

2) Testing - Robust and easy testing with Minitest, VCR and Webmock. The testing should be fast (api calls should be cached), but the code should not be so complex that it unmaintainable.

The Marvel API documentation can be found here:

https://developer.marvel.com/docs

As you can see, the API calls are only of 2 types, either they request a list of resources (like characters, comics, events, etc.) or they request a single specific resource (like a character, or one comic, etc.)

This immediately tells me that I should make 2 classes:

Marvel::Api::List
Marvel::Api::Resource

Therefore, methods for pagination can rest in List class and adding new api calls becomes very easy.


The actual API call is made by class Marvel::Api::Client which what the gem user needs to instantiate.

The common methods for both the Resource and List are handled by Client like send_request() and hash()

One question I thought upon was should List and Resource inherit from Client. In the end, I couldn't find a good enough reason for them to. What methods of Client will they be using? They will be having their own responsibility which is quite different from Client's responsibilty. Neither does it make lexical sense.

For testing either Rspec and Minitest is fine. I chose to go with minitest. The VCR and Webhook gems ensure caching of API calls so that I do not go out of my quota limit.

The apikey and private_key are stored in test/fixtures/keys.yml file which is git ignored.

The custom errors are defined in api/errors.rb

For making the actual API calls I chose to go with httparty as it is faster than faraday. Although curb is a faster http library, installation of curb is not very platform independent. Therefore, I decided httparty is the best among all options.

- Saurabh Sikchi